version: '3.9'

services:
  snapshotter-lite-local-collector:
    image: ghcr.io/powerloom/snapshotter-lite-local-collector:${IMAGE_TAG}
    expose:
      - ${LOCAL_COLLECTOR_PORT}
    ports:
      - ${LOCAL_COLLECTOR_PORT}:${LOCAL_COLLECTOR_PORT}
    volumes:
      - ./shared-volume:/keys
    environment:
      - SIGNER_ACCOUNT_ADDRESS=$SIGNER_ACCOUNT_ADDRESS
      - SIGNER_ACCOUNT_PRIVATE_KEY=$SIGNER_ACCOUNT_PRIVATE_KEY
      - IPFS_URL=$IPFS_URL
      - IPFS_API_KEY=$IPFS_API_KEY
      - IPFS_API_SECRET=$IPFS_API_SECRET
      - PROTOCOL_STATE_CONTRACT=$PROTOCOL_STATE_CONTRACT
      - PROST_RPC_URL=$PROST_RPC_URL
      - PROST_CHAIN_ID=$PROST_CHAIN_ID
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - SEQUENCER_ID=$SEQUENCER_ID
      - RELAYER_RENDEZVOUS_POINT=$RELAYER_RENDEZVOUS_POINT
      - CLIENT_RENDEZVOUS_POINT=$CLIENT_RENDEZVOUS_POINT
      - LOCAL_COLLECTOR_PORT=$LOCAL_COLLECTOR_PORT
      - RELAYER_PRIVATE_KEY=$RELAYER_PRIVATE_KEY
      - BLOCK_TIME=$BLOCK_TIME
      - DATA_MARKET_ADDRESS=$DATA_MARKET_ADDRESS
    command:
      bash -c  "bash server_autofill.sh && bash init_processes.sh"

  snapshotter-lite-v2:
    image: ghcr.io/powerloom/snapshotter-lite-v2:${IMAGE_TAG}
    expose:
      - ${CORE_API_PORT}
    ports:
      - ${CORE_API_PORT}:${CORE_API_PORT}
    volumes:
      - ./logs:/logs
    environment:
      - SIGNER_ACCOUNT_ADDRESS=$SIGNER_ACCOUNT_ADDRESS
      - SIGNER_ACCOUNT_PRIVATE_KEY=$SIGNER_ACCOUNT_PRIVATE_KEY
      - SLOT_ID=$SLOT_ID
      - RELAYER_HOST=$RELAYER_HOST
      - SOURCE_RPC_URL=$SOURCE_RPC_URL
      - PROST_RPC_URL=$PROST_RPC_URL
      - IPFS_URL=$IPFS_URL
      - IPFS_API_KEY=$IPFS_API_KEY
      - IPFS_API_SECRET=$IPFS_API_SECRET
      - PROTOCOL_STATE_CONTRACT=$PROTOCOL_STATE_CONTRACT
      - LOCAL_COLLECTOR_PORT=$LOCAL_COLLECTOR_PORT
      - SLACK_REPORTING_URL=$SLACK_REPORTING_URL
      - POWERLOOM_REPORTING_URL=$POWERLOOM_REPORTING_URL
      - WEB3_STORAGE_TOKEN=$WEB3_STORAGE_TOKEN
      - NAMESPACE=$NAMESPACE
      - DATA_MARKET_ADDRESS=$DATA_MARKET_ADDRESS
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    command:
      bash -c "bash snapshotter_autofill.sh && bash init_docker.sh"
  ipfs:
    image: ipfs/kubo:release
    profiles: ["ipfs"]
    environment:
      - IPFS_PROFILE=server
    entrypoint: >
      /bin/sh -c "
      echo 'adding cronjob';
      mkdir -p /var/spool/cron/crontabs;
      croncmd=\"cd /data/ipfs && find . -type f -mtime +7 -name \\"*.data\\" | xargs rm -f 2>&1\";
      cronjob=\"0 * * * * $$croncmd\";
      ( crontab -l | grep -v -F \"$$croncmd\" ; echo \"$$cronjob\" ) | crontab -;
      echo 'starting ipfs';
      /sbin/tini -- /usr/local/bin/start_ipfs daemon --migrate=true --agent-version-suffix=docker;
      "
    #command:
    #   ["daemon", "--migrate=true", "--agent-version-suffix=docker"]
    restart: on-failure
